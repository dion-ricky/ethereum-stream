services:
  jobmanager:
    build: .
    ports:
      - "8080:8081"
    command: jobmanager
    expose:
      - "6123"
    depends_on:
      - kafka
      - postgres
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager

  taskmanager:
    build: .
    depends_on:
      - jobmanager
    command: taskmanager
    expose:
      - "6121"
      - "6122"
    scale: 1
    links:
      - jobmanager:jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2

  kafka:
    image: apache/kafka:3.9.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    volumes:
      - kafka:/var/lib/kafka/data
    healthcheck:
      test: /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server kafka:9092 || exit 1
      interval: 30s
      timeout: 60s
      retries: 10

  kafka-init:
    image: apache/kafka:3.9.0
    command: /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic eth-transactions
    depends_on:
      kafka:
        condition: service_healthy

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ethereum
      POSTGRES_USER: ethereum
      POSTGRES_PASSWORD: ethereum
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d

  datagen:
    build: producer/
    command: producer /usr/src/producer/data/ethereum_transactions-000000000001 eth-transactions
    volumes:
      - ./data:/usr/src/producer/data
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_started
    profiles:
      - datagen

  zookeeper:
    image: zookeeper:3.5.10
    ports:
      - "2181:2181"
    environment:
      - ZOO_MY_ID=1

  coordinator:
    image: apache/druid:32.0.0
    volumes:
      - druid_shared:/opt/shared
      - druid_coordinator_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
    ports:
      - "8081:8081"
    command:
      - coordinator
    env_file:
      - .env

  broker:
    image: apache/druid:32.0.0
    volumes:
      - druid_broker_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8082:8082"
    command:
      - broker
    env_file:
      - .env

  historical:
    image: apache/druid:32.0.0
    volumes:
      - druid_shared:/opt/shared
      - druid_historical_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8083:8083"
    command:
      - historical
    env_file:
      - .env

  middlemanager:
    image: apache/druid:32.0.0
    volumes:
      - druid_shared:/opt/shared
      - druid_middle_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8091:8091"
      - "8100-8105:8100-8105"
    command:
      - middleManager
    env_file:
      - .env

  router:
    image: apache/druid:32.0.0
    volumes:
      - druid_router_var:/opt/druid/var
    depends_on:
      - zookeeper
      - postgres
      - coordinator
    ports:
      - "8888:8888"
    command:
      - router
    env_file:
      - .env

volumes:
  kafka:
  postgres:

  druid_metadata:
  druid_middle_var:
  druid_historical_var:
  druid_broker_var:
  druid_coordinator_var:
  druid_router_var:
  druid_shared: